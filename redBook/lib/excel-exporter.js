// ÈáëÂ±±ÂäûÂÖ¨Êô∫ËÉΩË°®Ê†º(.ksheet)ÂØºÂá∫Â∑•ÂÖ∑
class KsheetExporter {
    constructor() {
        this.workbook = null;
        this.worksheet = null;
    }

    // ÂàõÂª∫.ksheetÊñá‰ª∂Âπ∂‰∏ãËΩΩ
    async exportToKsheet(data, filename = 'Â∞èÁ∫¢‰π¶Â∏ñÂ≠êÊï∞ÊçÆ') {
        try {
            // È™åËØÅÊï∞ÊçÆ
            this.validateData(data);
            
            // Ê†ºÂºèÂåñÊï∞ÊçÆ
            const formattedData = this.formatData(data);
            
            // ÂáÜÂ§áË°®Â§¥ - ÂåÖÂê´Êõ¥Â§öÂ≠óÊÆµ
            const headers = ['Â∏ñÂ≠êID', 'Â∏ñÂ≠êÊ†áÈ¢ò', '‰ΩúËÄÖÊòµÁß∞', 'ÂñúÊ¨¢Êï∞', 'Êî∂ËóèÊï∞', 'ËØÑËÆ∫Êï∞', 'ÂàÜ‰∫´Êï∞', 'Â∏ñÂ≠êÈìæÊé•', 'Êï∞ÊçÆÁ±ªÂûã', 'ÈááÈõÜÊó∂Èó¥'];
            
            // ÂáÜÂ§áÊï∞ÊçÆË°å - ÂåÖÂê´Êõ¥Â§öÂ≠óÊÆµ
            const rows = formattedData.map(post => [
                post.id || '',
                post.display_title || 'Êó†Ê†áÈ¢ò',
                post.nick_name || 'Êú™Áü•Áî®Êà∑',
                post.liked_count || '0',
                post.collected_count || '0',
                post.comment_count || '0',
                post.shared_count || '0',
                post.full_url || '',
                post.raw_type || 'unknown',
                post.timestamp ? new Date(post.timestamp).toLocaleString('zh-CN') : ''
            ]);

            // ÂàõÂª∫KsheetÊ†ºÂºèÔºà‰ΩøÁî®CSV‰Ωú‰∏∫Âü∫Á°ÄÔºå‰ΩÜËÆæÁΩÆÊ≠£Á°ÆÁöÑMIMEÁ±ªÂûãÔºâ
            const ksheetData = this.createKsheetFormat(headers, rows);
            
            // ÂàõÂª∫Âπ∂‰∏ãËΩΩÊñá‰ª∂
            await this.downloadFile(ksheetData, `${filename}_${this.getDateString()}.ksheet`);
            
            return { success: true, message: `KsheetÊñá‰ª∂ÂØºÂá∫ÊàêÂäüÔºåÂÖ±ÂØºÂá∫ ${formattedData.length} Êù°Êï∞ÊçÆ` };
        } catch (error) {
            console.error('ÂØºÂá∫KsheetÂ§±Ë¥•:', error);
            return { success: false, message: 'ÂØºÂá∫Â§±Ë¥•: ' + error.message };
        }
    }

    // ÂÖºÂÆπÊóßÊñπÊ≥ïÂêç
    async exportToExcel(data, filename = 'Â∞èÁ∫¢‰π¶Â∏ñÂ≠êÊï∞ÊçÆ') {
        return await this.exportToKsheet(data, filename);
    }

    // ÂàõÂª∫KsheetÊ†ºÂºèÊï∞ÊçÆ
    createKsheetFormat(headers, rows) {
        // KsheetÊñá‰ª∂ÂÆûÈôÖ‰∏ä‰πüÊòØÂü∫‰∫éCSVÊ†ºÂºèÔºå‰ΩÜ‰ΩøÁî®ÁâπÊÆäÁöÑÁºñÁ†ÅÂíåÊ†áËØÜ
        let ksheet = '\uFEFF'; // UTF-8 BOM
        
        // Ê∑ªÂä†KsheetÊñá‰ª∂Ê†áËØÜÂ§¥ÈÉ®ÔºàÈáëÂ±±ÂäûÂÖ¨Êô∫ËÉΩË°®Ê†ºÊ†áËØÜÔºâ
        ksheet += '# ÈáëÂ±±ÂäûÂÖ¨Êô∫ËÉΩË°®Ê†ºÊñá‰ª∂\n';
        ksheet += '# Êñá‰ª∂ÂàõÂª∫Êó∂Èó¥: ' + new Date().toLocaleString('zh-CN') + '\n';
        ksheet += '# Êï∞ÊçÆÊù•Ê∫ê: Â∞èÁ∫¢‰π¶Êï∞ÊçÆÈááÈõÜÂô®\n';
        ksheet += '\n';
        
        // Ê∑ªÂä†Ë°®Â§¥
        ksheet += headers.map(header => `"${header}"`).join(',') + '\n';
        
        // Ê∑ªÂä†Êï∞ÊçÆË°å
        rows.forEach(row => {
            const ksheetRow = row.map(cell => {
                // Â§ÑÁêÜÁâπÊÆäÂ≠óÁ¨¶ÂíåÊç¢Ë°åÁ¨¶
                let value = String(cell || '');
                value = value.replace(/"/g, '""'); // ËΩ¨‰πâÂèåÂºïÂè∑
                value = value.replace(/\n/g, ' '); // Êç¢Ë°åÁ¨¶ËΩ¨‰∏∫Á©∫Ê†º
                return `"${value}"`;
            });
            ksheet += ksheetRow.join(',') + '\n';
        });
        
        return ksheet;
    }

    // ÂàõÂª∫CSVÊ†ºÂºèÊï∞ÊçÆÔºà‰øùÊåÅÂêëÂêéÂÖºÂÆπÔºâ
    createCSV(headers, rows) {
        return this.createKsheetFormat(headers, rows);
    }

    // ‰∏ãËΩΩÊñá‰ª∂ - ÂÖºÂÆπService WorkerÁéØÂ¢ÉÔºåÊîØÊåÅKsheetÊ†ºÂºè
    async downloadFile(content, filename) {
        return new Promise((resolve, reject) => {
            try {
                // Ê†πÊçÆÊñá‰ª∂Êâ©Â±ïÂêçÁ°ÆÂÆöMIMEÁ±ªÂûã
                let mimeType = 'text/csv;charset=utf-8';
                if (filename.endsWith('.ksheet')) {
                    // ÈáëÂ±±ÂäûÂÖ¨Êô∫ËÉΩË°®Ê†ºÁöÑMIMEÁ±ªÂûã
                    mimeType = 'application/vnd.kingsoft.ksheet;charset=utf-8';
                }
                
                // Âú®Service Worker‰∏≠‰ΩøÁî®Data URLÊõø‰ª£Object URL
                const base64Content = btoa(unescape(encodeURIComponent(content)));
                const dataUrl = `data:${mimeType};base64,${base64Content}`;
                
                console.log(`üì• ÂºÄÂßã‰∏ãËΩΩÊñá‰ª∂: ${filename} (${mimeType})`);
                
                chrome.downloads.download({
                    url: dataUrl,
                    filename: filename,
                    saveAs: true
                }, (downloadId) => {
                    if (chrome.runtime.lastError) {
                        reject(new Error(chrome.runtime.lastError.message));
                    } else {
                        console.log('‚úÖ Êñá‰ª∂‰∏ãËΩΩÂºÄÂßãÔºåID:', downloadId);
                        resolve(downloadId);
                    }
                });
            } catch (error) {
                reject(error);
            }
        });
    }

    // Ëé∑ÂèñÊó•ÊúüÂ≠óÁ¨¶‰∏≤
    getDateString() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const day = String(now.getDate()).padStart(2, '0');
        const hour = String(now.getHours()).padStart(2, '0');
        const minute = String(now.getMinutes()).padStart(2, '0');
        
        return `${year}${month}${day}_${hour}${minute}`;
    }

    // ÂàõÂª∫È´òÁ∫ßExcelÊ†ºÂºèÔºàXLSXÔºâ- ‰ΩøÁî®Á∫ØJavaScriptÂÆûÁé∞
    async exportToXLSX(data, filename = 'Â∞èÁ∫¢‰π¶Â∏ñÂ≠êÊï∞ÊçÆ') {
        try {
            // ÁÆÄÂåñÁöÑXLSXÁîüÊàêÔºàÂü∫‰∫éOpenXMLÊ†ºÂºèÔºâ
            const headers = ['Â∏ñÂ≠êÊ†áÈ¢ò', 'ÁÇπÂáªÈáè', 'Êî∂ËóèÈáè', 'Â∏ñÂ≠êÈìæÊé•', 'ÈááÈõÜÊó∂Èó¥'];
            const sheetData = [headers];
            
            data.forEach(post => {
                sheetData.push([
                    post.title || 'Êó†Ê†áÈ¢ò',
                    post.views || '0',
                    post.collects || '0',
                    post.link || '',
                    post.timestamp ? new Date(post.timestamp).toLocaleString('zh-CN') : ''
                ]);
            });

            const xlsx = this.createXLSXBuffer(sheetData);
            
            const blob = new Blob([xlsx], { 
                type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
            });
            const url = URL.createObjectURL(blob);
            
            await new Promise((resolve, reject) => {
                chrome.downloads.download({
                    url: url,
                    filename: `${filename}_${this.getDateString()}.xlsx`,
                    saveAs: true
                }, (downloadId) => {
                    if (chrome.runtime.lastError) {
                        reject(new Error(chrome.runtime.lastError.message));
                    } else {
                        resolve(downloadId);
                    }
                    URL.revokeObjectURL(url);
                });
            });

            return { success: true, message: 'XLSXÊñá‰ª∂ÂØºÂá∫ÊàêÂäü' };
        } catch (error) {
            console.error('ÂØºÂá∫XLSXÂ§±Ë¥•:', error);
            // Â¶ÇÊûúXLSXÂØºÂá∫Â§±Ë¥•ÔºåÂõûÈÄÄÂà∞CSV
            return await this.exportToExcel(data, filename);
        }
    }

    // ÂàõÂª∫ÁÆÄÂåñÁöÑXLSX buffer
    createXLSXBuffer(data) {
        // ÁÆÄÂåñÁöÑXLSXÁªìÊûÑÔºàÂÆûÈôÖÂ∫îËØ•‰ΩøÁî®‰∏ìÈó®ÁöÑÂ∫ìÔºâ
        // ËøôÈáåÂÆûÁé∞‰∏Ä‰∏™Âü∫Êú¨ÁöÑXMLÁªìÊûÑ
        const sharedStrings = [];
        const sharedStringsMap = {};
        
        // Â§ÑÁêÜÂÖ±‰∫´Â≠óÁ¨¶‰∏≤
        data.forEach(row => {
            row.forEach(cell => {
                const cellStr = String(cell || '');
                if (!(cellStr in sharedStringsMap)) {
                    sharedStringsMap[cellStr] = sharedStrings.length;
                    sharedStrings.push(cellStr);
                }
            });
        });

        // ÁîüÊàêworksheet XML
        let worksheetXML = `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main">
    <sheetData>`;

        data.forEach((row, rowIndex) => {
            worksheetXML += `<row r="${rowIndex + 1}">`;
            row.forEach((cell, colIndex) => {
                const cellRef = this.getCellReference(rowIndex, colIndex);
                const cellStr = String(cell || '');
                const stringIndex = sharedStringsMap[cellStr];
                
                worksheetXML += `<c r="${cellRef}" t="inlineStr">`;
                worksheetXML += `<is><t>${this.escapeXML(cellStr)}</t></is>`;
                worksheetXML += `</c>`;
            });
            worksheetXML += `</row>`;
        });

        worksheetXML += `</sheetData></worksheet>`;

        // Áî±‰∫éÂÆåÊï¥ÁöÑXLSXÊ†ºÂºèÊØîËæÉÂ§çÊùÇÔºåËøôÈáåÁÆÄÂåñÂ§ÑÁêÜ
        // ÂÆûÈôÖÈ°πÁõÆ‰∏≠Âª∫ËÆÆ‰ΩøÁî®SheetJSÁ≠â‰∏ì‰∏öÂ∫ì
        const textEncoder = new TextEncoder();
        return textEncoder.encode(worksheetXML);
    }

    // Ëé∑ÂèñExcelÂçïÂÖÉÊ†ºÂºïÁî®
    getCellReference(row, col) {
        let colName = '';
        let colNum = col;
        
        while (colNum >= 0) {
            colName = String.fromCharCode(65 + (colNum % 26)) + colName;
            colNum = Math.floor(colNum / 26) - 1;
        }
        
        return colName + (row + 1);
    }

    // ËΩ¨‰πâXMLÁâπÊÆäÂ≠óÁ¨¶
    escapeXML(text) {
        return String(text)
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    }

    // È™åËØÅÊï∞ÊçÆ
    validateData(data) {
        if (!Array.isArray(data)) {
            throw new Error('Êï∞ÊçÆÂøÖÈ°ªÊòØÊï∞ÁªÑÊ†ºÂºè');
        }
        
        if (data.length === 0) {
            throw new Error('Ê≤°ÊúâÊï∞ÊçÆÂèØÂØºÂá∫');
        }
        
        return true;
    }

    // Ê†ºÂºèÂåñÊï∞ÊçÆ
    formatData(rawData) {
        return rawData.map(post => ({
            id: post.id || '',
            display_title: this.sanitizeString(post.display_title || 'Êó†Ê†áÈ¢ò'),
            nick_name: this.sanitizeString(post.nick_name || 'Êú™Áü•Áî®Êà∑'),
            liked_count: this.formatNumber(post.liked_count || '0'),
            collected_count: this.formatNumber(post.collected_count || '0'),
            comment_count: this.formatNumber(post.comment_count || '0'),
            shared_count: this.formatNumber(post.shared_count || '0'),
            full_url: post.full_url || '',
            raw_type: post.raw_type || 'unknown',  // Êñ∞Â¢ûÔºöÊï∞ÊçÆÁ±ªÂûãÂ≠óÊÆµ
            timestamp: post.timestamp || new Date().toISOString()
        }));
    }

    // Ê∏ÖÁêÜÂ≠óÁ¨¶‰∏≤
    sanitizeString(str) {
        return String(str)
            .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '') // ÁßªÈô§ÊéßÂà∂Â≠óÁ¨¶
            .replace(/\s+/g, ' ') // ÂêàÂπ∂Â§ö‰∏™Á©∫Ê†º
            .trim();
    }

    // Ê†ºÂºèÂåñÊï∞Â≠ó
    formatNumber(num) {
        if (typeof num === 'number') return num.toString();
        if (typeof num === 'string') {
            // ÊèêÂèñÊï∞Â≠ó
            const match = num.match(/[\d,]+/);
            return match ? match[0] : '0';
        }
        return '0';
    }
}

// ÂØºÂá∫ÂÆû‰æã
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ExcelExporter;
} else if (typeof window !== 'undefined') {
    window.ExcelExporter = ExcelExporter;
}
